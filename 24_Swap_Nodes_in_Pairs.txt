Swap Nodes in Pairs
Given a linked list, swap every two adjacent nodes and return its head.
For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

[my solution ]
重点是处理好边界

/**
* Definition for singly-linked list.
* struct ListNode {
*     int val;
*     struct ListNode *next;
* };
*/
struct ListNode* swapPairs(struct ListNode* head) {
    struct ListNode dummy = {};
    struct ListNode *pre;
    struct ListNode *cur;
    struct ListNode *du;
    du = &dummy;
    du->next =head;
    pre = du;
    cur = head;
    if (head == NULL || head->next == NULL) return head;
    while (cur && cur->next){
        pre->next=cur->next;
        cur->next=cur->next->next;
        pre->next->next=cur;
        pre=cur;
        cur=cur->next;
    }
    return du->next;
}

-----------------------------
class Solution {
public:
    ListNode *swapPairs(ListNode *head) {
        ListNode *dummy = new ListNode(0);
        dummy->next = head;
        ListNode *prev = dummy, *cur = head;
       
        while(cur && cur->next) {
            prev->next = cur->next;
            cur->next = cur->next->next;
            prev->next->next = cur;
            prev = cur;
            cur = cur->next;
        }
       
        return dummy->next;
    }
};


Haoran给了一个递归解法，更简洁
1:    ListNode *swapPairs(ListNode *head) { 
2:      if (head == NULL || head->next == NULL) { 
3:        return head; 
4:      } 
5:      ListNode* nextPair = head->next->next; 
6:      ListNode* newHead = head->next; 
7:      head->next->next = head; 
8:      head->next = swapPairs(nextPair); 
9:      return newHead; 
10:    } 
