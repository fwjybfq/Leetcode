Given n, how many structurally unique BST's (binary search trees) that store values 1...n?
For example,
Given n = 3, there are a total of 5 unique BST's.
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

int numTrees(int n) {
   
}

[my solution]

递推方程： 
以1 为root结点，         以2 为root结点,      以3为root结点
   1        1                           2                                  3                     3
    \        \                          /  \                               /                     /
     3       2                       1     3                             2                    1
    /          \                                                           /                      \
   2            3                                                        1                         2
因为必须是BST，所以当以第i个数字为root结点时，则比i小的i-1个结点为构成其左子树的结点，比i大的n-i个结点构成其右子树的结点。
递推式中左边的红色部分表示左子树的种类数，右边的黑色部分表示右子树的种类数。

F[N] = F[0]*F[N-1] + F[1]*F[N-2]+...+F[N-2]*F[1]+F[N-1]*F[0]
F[0] = 1， F[1]=1
int numTrees(int n) {
    int *F = (int *)calloc(n+1,sizeof(int));
     int i = 0, j=0;
     F[0] = 1;
     F[1] = 1;
     if (n==0) return 1;
     if (n==1) return 1;
    for (i=2;i<=n;i++){
         for (j=0;j<i;j++){
              F[i] += F[j]*F[i-j-1];
          }
     }
     return F[n];
}
